async function initializeLandingPageRedirection() { try { const e = await fetchConfig(); $().ready((() => initialize(e))) } catch (e) { console.error("Initialization failed:", e) } } async function fetchConfig() { const e = await fetch("https://growthatkyte.github.io/web/scripts/landing-pages-list.json"); if (!e.ok) throw new Error("Failed to fetch landing pages configuration"); return e.json() } function initialize(e) { applyButtonClasses(e), storeUTMParams(), appendUTMParamsToLinks(), setupClickHandler(e) } function applyButtonClasses(e) { const t = normalizePath(window.location.pathname); $('input[type="submit"], button[type="submit"]').each((function (r) { shouldApplyClass(r, e, t) && ($(r).addClass(e[t].redirectClass), console.log(`Applied '${e[t].redirectClass}' to buttons for path: ${t}`)) })) } function shouldApplyClass(e, t, r) { return !$(e).hasClass("mauticform-button") && !$(e).hasClass("direct-button") && t[r] } function setupClickHandler(e) { $(document).on("click", (t => { const r = t.target.closest('input[type="submit"], button[type="submit"]'); shouldHandleRedirection(r) && (t.preventDefault(), handleRedirection(e, getStoredUTMParams(), r)) })) } function shouldHandleRedirection(e) { return e && !$(e).hasClass("mauticform-button") && !$(e).hasClass("direct-button") } function handleRedirection(e, t, r) { const n = e[normalizePath(window.location.pathname)] || {}, a = getRedirectClass(r), i = isMobileDevice() ? handleMobileRedirection(a, n, t) : createRedirectUrl("https://web.auth.kyteapp.com/signup", t); window.location.href = i } function getRedirectClass(e) { return $(e).hasClass("cpp-redir") ? "cpp-redir" : $(e).hasClass("catalog-redir") ? "catalog-redir" : $(e).hasClass("control-redir") ? "control-redir" : "default" } function handleMobileRedirection(e, t, r) { return "cpp-redir" === e ? handleCPPRedirection(t, r) : createStaticLink(e, r) } function handleCPPRedirection(e, t) { const r = new URLSearchParams(t).toString(); return isIOSDevice() ? e.ios ? `${e.ios}&${r}` : createRedirectUrl("https://web.auth.kyteapp.com/signup", t) : isAndroidDevice() && e.android ? `${e.android}&${r}` : createRedirectUrl("https://web.auth.kyteapp.com/signup", t) } function createStaticLink(e, t) { const r = { default: "https://pos.auth.kyteapp.com", "catalog-redir": "https://catalog.auth.kyteapp.com", "control-redir": "https://control.auth.kyteapp.com" }, n = r[e] || r.default; return `${n}?${mergeQueryParams(new URLSearchParams(new URL(n).search), t).toString()}` } function createRedirectUrl(e, t) { return `${e}?${mergeQueryParams(new URLSearchParams(new URL(e).search), t).toString()}` } function normalizePath(e) { return e.endsWith("/") ? e.slice(0, -1) : e } function getUTMParams() { const e = new URLSearchParams(location.search), t = {}, r = normalizePath(window.location.pathname.substring(1)), n = getReferrerHostnameParts(); return ["utm_source", "utm_medium", "utm_campaign", "utm_content", "utm_term", "gclid"].forEach((a => { t[a] = getUTMParamValue(e, a, n, r) })), t } function getReferrerHostnameParts() { try { if (document.referrer) { return new URL(document.referrer).hostname.split(".").filter((e => "www" !== e)) } return [] } catch (e) { return console.warn("Invalid or empty referrer:", e), [] } } function getUTMParamValue(e, t, r, n) { return "utm_source" === t ? e.get(t) || r[0] || "" : "utm_campaign" === t ? e.get(t) || n || "home" : e.get(t) || "" } function storeUTMParams() { const e = getUTMParams(), t = getStoredUTMParams(); Object.entries(e).forEach((([e, r]) => { t[e] || (t[e] = r) })), localStorage.setItem("utm_params", JSON.stringify(t)) } function getStoredUTMParams() { return JSON.parse(localStorage.getItem("utm_params")) || {} } function appendUTMParamsToLinks() { const e = getStoredUTMParams(); $("a").each((function (t) { const r = new URL(t.href), n = mergeQueryParams(new URLSearchParams(r.search), e); r.search = n.toString(), t.href = r.toString() })) } function mergeQueryParams(e, t) { const r = new URLSearchParams(e); return Object.entries(t).forEach((([e, t]) => { r.has(e) || r.set(e, t) })), r } function isMobileDevice() { return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) } function isIOSDevice() { return /iPad|iPhone|iPod/.test(navigator.userAgent) } function isAndroidDevice() { return /Android/.test(navigator.userAgent) } initializeLandingPageRedirection();