async function initializeLandingPageRedirection() { try { const t = await fetchConfig(); "loading" === document.readyState ? document.addEventListener("DOMContentLoaded", (() => applyClasses(t))) : applyClasses(t), setupClickHandler(t) } catch (t) { console.error("Initialization failed:", t) } } async function fetchConfig() { const t = await fetch("https://growthatkyte.github.io/web/scripts/landing-pages-list.json"); if (!t.ok) throw new Error("Failed to fetch landing pages configuration"); return t.json() } function applyClasses(t) { const e = normalizePath(window.location.pathname); document.querySelectorAll('input[type="submit"], button[type="submit"]').forEach((n => { n.classList.contains("mauticform-button") || n.classList.contains("direct-button") || !t[e] || (n.classList.add(t[e].redirectClass), console.log(`Applied '${t[e].redirectClass}' to buttons for path: ${e}`)) })) } function setupClickHandler(t) { document.addEventListener("click", (e => { const n = e.target.closest('input[type="submit"], button[type="submit"]'); !n || n.classList.contains("mauticform-button") || n.classList.contains("direct-button") || (e.preventDefault(), handleRedirection(t, getUTMParams(), n)) })) } function handleRedirection(t, e, n) { const i = t[normalizePath(window.location.pathname)] || {}, a = n.classList.contains("cpp-redir") ? "cpp-redir" : n.classList.contains("catalog-redir") ? "catalog-redir" : n.classList.contains("control-redir") ? "control-redir" : "default", o = isMobileDevice() ? "cpp-redir" === a ? handleCPPRedirection(i, e) : createStaticLink(a, e) : handleDesktopRedirection(e); window.location.href = o } function handleDesktopRedirection(t) { return `https://web.auth.kyteapp.com/signup?${new URLSearchParams(t).toString()}` } function createStaticLink(t, e) { const n = { default: "https://pos.auth.kyteapp.com/signup", "catalog-redir": "https://catalog.auth.kyteapp.com/signup", "control-redir": "https://control.auth.kyteapp.com/signup" }; return `${n[t] || n.default}?${new URLSearchParams(e).toString()}` } function handleCPPRedirection(t, e) { const n = new URLSearchParams(e).toString(); return isIOSDevice() ? `${t.ios}?${n}` : `${t.android}?${n}` } function normalizePath(t) { return t.endsWith("/") ? t.slice(0, -1) : t } function getUTMParams() { const t = new URLSearchParams(location.search), e = {}, n = normalizePath(window.location.pathname.substring(1)), i = new URL(document.referrer).hostname.split(".").filter((t => "www" !== t)); return ["utm_source", "utm_medium", "utm_campaign", "utm_content", "utm_term", "gclid"].forEach((a => { e[a] = "utm_source" === a ? t.get(a) || i[0] || "" : "utm_campaign" === a ? t.get(a) || n || "home" : t.get(a) || "" })), e } function isMobileDevice() { return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) } function isIOSDevice() { return navigator.userAgentData ? "iOS" === navigator.userAgentData.platform : /iPad|iPhone|iPod/.test(navigator.userAgent) } initializeLandingPageRedirection();