async function initializeLandingPageRedirection() { try { const t = await fetchConfig(); "loading" === document.readyState ? document.addEventListener("DOMContentLoaded", (() => applyClasses(t))) : applyClasses(t), setupClickHandler(t) } catch (t) { console.error("Initialization failed:", t) } } async function fetchConfig() { const t = await fetch("https://growthatkyte.github.io/web/scripts/landing-pages-list.json"); if (!t.ok) throw new Error("Failed to fetch landing pages configuration"); return t.json() } function applyClasses(t) { const n = normalizePath(window.location.pathname); document.querySelectorAll('input[type="submit"], button[type="submit"]').forEach((e => { e.classList.contains("mauticform-button") || e.classList.contains("direct-button") || !t[n] || (e.classList.add(t[n].redirectClass), console.log(`Applied '${t[n].redirectClass}' to buttons for path: ${n}`)) })) } function setupClickHandler(t) { document.addEventListener("click", (n => { const e = n.target.closest('input[type="submit"], button[type="submit"]'); !e || e.classList.contains("mauticform-button") || e.classList.contains("direct-button") || (n.preventDefault(), handleRedirection(t, getUTMParams(), e)) })) } function handleRedirection(t, n, e) { const i = t[normalizePath(window.location.pathname)] || {}, a = e.classList.contains("cpp-redir") ? "cpp-redir" : e.classList.contains("catalog-redir") ? "catalog-redir" : e.classList.contains("control-redir") ? "control-redir" : "default", o = isMobileDevice() ? "cpp-redir" === a ? handleCPPRedirection(i, n) : createStaticLink(a, n) : handleDesktopRedirection(n); window.location.href = o } function handleDesktopRedirection(t) { return `https://web.auth.kyteapp.com/signup?${new URLSearchParams(t).toString()}` } function createStaticLink(t, n) { const e = { default: "https://pos.auth.kyteapp.com", "catalog-redir": "https://catalog.auth.kyteapp.com", "control-redir": "https://control.auth.kyteapp.com" }; return `${e[t] || e.default}?${new URLSearchParams(n).toString()}` } function handleCPPRedirection(t, n) { const e = new URLSearchParams(n).toString(); return isIOSDevice() ? `${t.ios}?${e}` : `${t.android}?${e}` } function normalizePath(t) { return t.endsWith("/") ? t.slice(0, -1) : t } function getUTMParams() { const t = new URLSearchParams(location.search), n = {}, e = normalizePath(window.location.pathname.substring(1)); return ["utm_source", "utm_medium", "utm_campaign", "utm_content", "utm_term", "gclid"].forEach((i => { n[i] = t.get(i) || ("utm_campaign" === i ? e : "") })), n } function isMobileDevice() { return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) } function isIOSDevice() { return /iPad|iPhone|iPod/.test(navigator.userAgent) || "MacIntel" === navigator.platform && navigator.maxTouchPoints > 1 } initializeLandingPageRedirection();