async function initializeLandingPageRedirection() { try { const t = await fetchConfig(); $().ready((() => initialize(t))) } catch (t) { console.error("Initialization failed:", t) } } async function fetchConfig() { const t = await fetch("https://growthatkyte.github.io/web/scripts/landing-pages-list.json"); if (!t.ok) throw new Error("Failed to fetch landing pages configuration"); return t.json() } function initialize(t) { applyButtonClasses(t), storeUTMParams(), appendUTMParamsToLinks(), setupClickHandler(t) } function applyButtonClasses(t) { const e = normalizePath(window.location.pathname); $('input[type="submit"], button[type="submit"]').each((function (r) { shouldApplyClass(r, t, e) && ($(r).addClass(t[e].redirectClass), console.log(`Applied '${t[e].redirectClass}' to buttons for path: ${e}`)) })) } function shouldApplyClass(t, e, r) { return !$(t).hasClass("mauticform-button") && !$(t).hasClass("direct-button") && e[r] } function setupClickHandler(t) { $(document).on("click", (e => { const r = e.target.closest('input[type="submit"], button[type="submit"]'); shouldHandleRedirection(r) && (e.preventDefault(), handleRedirection(t, getStoredUTMParams(), r)) })) } function shouldHandleRedirection(t) { return t && !$(t).hasClass("mauticform-button") && !$(t).hasClass("direct-button") } function handleRedirection(t, e, r) { const a = t[normalizePath(window.location.pathname)] || {}, n = getRedirectClass(r), i = isMobileDevice() ? handleMobileRedirection(n, a, e) : createRedirectUrl("https://web.auth.kyteapp.com/signup", e); window.location.href = i } function getRedirectClass(t) { return $(t).hasClass("cpp-redir") ? "cpp-redir" : $(t).hasClass("catalog-redir") ? "catalog-redir" : $(t).hasClass("control-redir") ? "control-redir" : "default" } function handleMobileRedirection(t, e, r) { return "cpp-redir" === t ? handleCPPRedirection(e, r) : createStaticLink(t, r) } function handleCPPRedirection(t, e) { const r = new URLSearchParams(e).toString(); return isIOSDevice() ? t.ios ? `${t.ios}&${r}` : createRedirectUrl("https://web.auth.kyteapp.com/signup", e) : isAndroidDevice() && t.android ? `${t.android}&${r}` : createRedirectUrl("https://web.auth.kyteapp.com/signup", e) } function createStaticLink(t, e) { const r = { default: "https://pos.auth.kyteapp.com", "catalog-redir": "https://catalog.auth.kyteapp.com", "control-redir": "https://control.auth.kyteapp.com" }, a = r[t] || r.default; return `${a}?${mergeQueryParams(new URLSearchParams(new URL(a).search), e).toString()}` } function createRedirectUrl(t, e) { return `${t}?${mergeQueryParams(new URLSearchParams(new URL(t).search), e).toString()}` } function normalizePath(t) { return t.endsWith("/") ? t.slice(0, -1) : t } function getUTMParams() { const t = new URLSearchParams(location.search), e = {}, r = normalizePath(window.location.pathname.substring(1)), a = getReferrerHostnameParts(); return ["utm_source", "utm_medium", "utm_campaign", "utm_content", "utm_term", "gclid"].forEach((n => { e[n] = getUTMParamValue(t, n, a, r) })), e } function getReferrerHostnameParts() { try { return new URL(document.referrer).hostname.split(".").filter((t => "www" !== t)) } catch (t) { return console.warn("Invalid or empty referrer:", t), [] } } function getUTMParamValue(t, e, r, a) { return "utm_source" === e ? t.get(e) || r[0] || "" : "utm_campaign" === e ? t.get(e) || a || "home" : t.get(e) || "" } function storeUTMParams() { const t = getUTMParams(), e = getStoredUTMParams(); Object.entries(t).forEach((([t, r]) => { e[t] || (e[t] = r) })), localStorage.setItem("utm_params", JSON.stringify(e)) } function getStoredUTMParams() { return JSON.parse(localStorage.getItem("utm_params")) || {} } function appendUTMParamsToLinks() { const t = getStoredUTMParams(); $("a").each((function (e) { const r = new URL(e.href), a = mergeQueryParams(new URLSearchParams(r.search), t); r.search = a.toString(), e.href = r.toString() })) } function mergeQueryParams(t, e) { const r = new URLSearchParams(t); return Object.entries(e).forEach((([t, e]) => { r.has(t) || r.set(t, e) })), r } function isMobileDevice() { return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) } function isIOSDevice() { return /iPad|iPhone|iPod/.test(navigator.userAgent) } function isAndroidDevice() { return /Android/.test(navigator.userAgent) } initializeLandingPageRedirection();