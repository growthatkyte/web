function landingPage() { return { config: null, async init() { try { this.config = await this.fetchConfig() } catch (t) { console.error("Initialization failed:", t) } }, async fetchConfig() { const t = await fetch("https://growthatkyte.github.io/web/scripts/landing-pages-list.json"); if (!t.ok) throw new Error("Failed to fetch landing pages configuration"); return t.json() }, applyButtonClasses() { const t = this.normalizePath(window.location.pathname); document.querySelectorAll('input[type="submit"], button[type="submit"]').forEach((e => { this.shouldApplyClass(e, t) && (e.classList.add(this.config[t].redirectClass), console.log(`Applied '${this.config[t].redirectClass}' to buttons for path: ${t}`)) })) }, shouldApplyClass(t, e) { return !t.classList.contains("mauticform-button") && !t.classList.contains("direct-button") && this.config[e] }, handleRedirection(t) { const e = t.target.closest('input[type="submit"], button[type="submit"]'); if (e && this.shouldHandleRedirection(e)) { t.preventDefault(); const i = this.getUTMParams(), a = this.normalizePath(window.location.pathname), r = this.config[a] || {}, n = this.getRedirectClass(e), s = this.isMobileDevice() ? this.handleMobileRedirection(n, r, i) : this.createRedirectUrl("https://web.auth.kyteapp.com/signup", i); window.location.href = s } }, shouldHandleRedirection: t => !t.classList.contains("mauticform-button") && !t.classList.contains("direct-button"), getRedirectClass: t => t.classList.contains("cpp-redir") ? "cpp-redir" : t.classList.contains("catalog-redir") ? "catalog-redir" : t.classList.contains("control-redir") ? "control-redir" : "default", handleMobileRedirection(t, e, i) { return "cpp-redir" === t ? this.handleCPPRedirection(e, i) : this.createStaticLink(t, i) }, handleCPPRedirection(t, e) { const i = new URLSearchParams(e).toString(); return this.isIOSDevice() ? t.ios ? `${t.ios}&${i}` : this.createRedirectUrl("https://web.auth.kyteapp.com/signup", e) : this.isAndroidDevice() && t.android ? `${t.android}&${i}` : this.createRedirectUrl("https://web.auth.kyteapp.com/signup", e) }, createStaticLink(t, e) { const i = { default: "https://pos.auth.kyteapp.com", "catalog-redir": "https://catalog.auth.kyteapp.com", "control-redir": "https://control.auth.kyteapp.com" }, a = i[t] || i.default; return `${a}?${this.mergeQueryParams(new URLSearchParams(new URL(a).search), e).toString()}` }, createRedirectUrl(t, e) { return `${t}?${this.mergeQueryParams(new URLSearchParams(new URL(t).search), e).toString()}` }, normalizePath: t => t.endsWith("/") ? t.slice(0, -1) : t, getUTMParams() { const t = new URLSearchParams(location.search), e = {}, i = this.normalizePath(window.location.pathname.substring(1)), a = this.getReferrerHostnameParts(); return ["utm_source", "utm_medium", "utm_campaign", "utm_content", "utm_term", "gclid"].forEach((r => { e[r] = this.getUTMParamValue(t, r, a, i) })), e }, getReferrerHostnameParts() { try { return new URL(document.referrer).hostname.split(".").filter((t => "www" !== t)) } catch (t) { return console.warn("Invalid or empty referrer:", t), [] } }, getUTMParamValue: (t, e, i, a) => "utm_source" === e ? t.get(e) || i[0] || "" : "utm_campaign" === e ? t.get(e) || a || "home" : t.get(e) || "", mergeQueryParams(t, e) { const i = new URLSearchParams(t); return Object.entries(e).forEach((([t, e]) => { i.has(t) || i.set(t, e) })), i }, isMobileDevice: () => /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent), isIOSDevice: () => /iPad|iPhone|iPod/.test(navigator.userAgent), isAndroidDevice: () => /Android/.test(navigator.userAgent) } } document.addEventListener("alpine:init", (() => { Alpine.data("landingPage", landingPage) }));