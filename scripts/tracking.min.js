async function initializeLandingPageRedirection() { try { const t = await fetchConfig(); "loading" === document.readyState ? document.addEventListener("DOMContentLoaded", (() => initialize(t))) : initialize(t) } catch (t) { console.error("Initialization failed:", t) } } async function fetchConfig() { const t = await fetch("https://growthatkyte.github.io/web/scripts/landing-pages-list.json"); if (!t.ok) throw new Error("Failed to fetch landing pages configuration"); return t.json() } function initialize(t) { applyButtonClasses(t), storeUTMParams(), appendUTMParamsToLinks(), setupClickHandler(t) } function applyButtonClasses(t) { const e = normalizePath(window.location.pathname); document.querySelectorAll('input[type="submit"], button[type="submit"]').forEach((n => { shouldApplyClass(n, t, e) && (n.classList.add(t[e].redirectClass), console.log(`Applied '${t[e].redirectClass}' to buttons for path: ${e}`)) })) } function shouldApplyClass(t, e, n) { return !t.classList.contains("mauticform-button") && !t.classList.contains("direct-button") && e[n] } function setupClickHandler(t) { document.addEventListener("click", (e => { const n = e.target.closest('input[type="submit"], button[type="submit"]'); shouldHandleRedirection(n) && (e.preventDefault(), handleRedirection(t, getStoredUTMParams(), n)) })) } function shouldHandleRedirection(t) { return t && !t.classList.contains("mauticform-button") && !t.classList.contains("direct-button") } function handleRedirection(t, e, n) { const r = t[normalizePath(window.location.pathname)] || {}, a = getRedirectClass(n), i = isMobileDevice() ? handleMobileRedirection(a, r, e) : createRedirectUrl("https://web.auth.kyteapp.com/signup", e); window.location.href = i } function getRedirectClass(t) { return t.classList.contains("cpp-redir") ? "cpp-redir" : t.classList.contains("catalog-redir") ? "catalog-redir" : t.classList.contains("control-redir") ? "control-redir" : "default" } function handleMobileRedirection(t, e, n) { return "cpp-redir" === t ? handleCPPRedirection(e, n) : createStaticLink(t, n) } function handleCPPRedirection(t, e) { const n = new URLSearchParams(e).toString(); return isIOSDevice() ? t.ios ? `${t.ios}&${n}` : createRedirectUrl("https://web.auth.kyteapp.com/signup", e) : isAndroidDevice() && t.android ? `${t.android}&${n}` : createRedirectUrl("https://web.auth.kyteapp.com/signup", e) } function createStaticLink(t, e) { const n = { default: "https://pos.auth.kyteapp.com", "catalog-redir": "https://catalog.auth.kyteapp.com", "control-redir": "https://control.auth.kyteapp.com" }, r = n[t] || n.default; return `${r}?${mergeQueryParams(new URLSearchParams(new URL(r).search), e).toString()}` } function createRedirectUrl(t, e) { return `${t}?${mergeQueryParams(new URLSearchParams(new URL(t).search), e).toString()}` } function normalizePath(t) { return t.endsWith("/") ? t.slice(0, -1) : t } function getUTMParams() { const t = new URLSearchParams(location.search), e = {}, n = normalizePath(window.location.pathname.substring(1)), r = getReferrerHostnameParts(); return ["utm_source", "utm_medium", "utm_campaign", "utm_content", "utm_term", "gclid"].forEach((a => { e[a] = getUTMParamValue(t, a, r, n) })), e } function getReferrerHostnameParts() { try { return new URL(document.referrer).hostname.split(".").filter((t => "www" !== t)) } catch (t) { return console.warn("Invalid or empty referrer:", t), [] } } function getUTMParamValue(t, e, n, r) { return "utm_source" === e ? t.get(e) || n[0] || "" : "utm_campaign" === e ? t.get(e) || r || "home" : t.get(e) || "" } function storeUTMParams() { const t = getUTMParams(), e = getStoredUTMParams(); Object.entries(t).forEach((([t, n]) => { e[t] || (e[t] = n) })), localStorage.setItem("utm_params", JSON.stringify(e)) } function getStoredUTMParams() { return JSON.parse(localStorage.getItem("utm_params")) || {} } function appendUTMParamsToLinks() { const t = getStoredUTMParams(); document.querySelectorAll("a").forEach((e => { const n = new URL(e.href), r = mergeQueryParams(new URLSearchParams(n.search), t); n.search = r.toString(), e.href = n.toString() })) } function mergeQueryParams(t, e) { const n = new URLSearchParams(t); return Object.entries(e).forEach((([t, e]) => { n.has(t) || n.set(t, e) })), n } function isMobileDevice() { return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) } function isIOSDevice() { return /iPad|iPhone|iPod/.test(navigator.userAgent) } function isAndroidDevice() { return /Android/.test(navigator.userAgent) } initializeLandingPageRedirection();