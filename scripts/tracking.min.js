async function initializeLandingPageRedirection() { try { const t = await fetchConfig(); document.addEventListener("DOMContentLoaded", (() => applyClassesAndSetupRedirection(t))) } catch (t) { console.error("Initialization failed:", t) } } async function fetchConfig() { const t = await fetch("https://growthatkyte.github.io/web/scripts/landing-pages-list.json"); if (!t.ok) throw new Error("Failed to fetch landing pages configuration"); return t.json() } function applyClassesAndSetupRedirection(t) { applyClasses(t), setupClickHandler(t) } function applyClasses(t) { const i = normalizePath(window.location.pathname); document.querySelectorAll('input[type="submit"], button[type="submit"]').forEach((e => { t[i] && e.classList.add(t[i].redirectClass) })) } function setupClickHandler(t) { document.addEventListener("click", (i => { const e = i.target.closest('input[type="submit"], button[type="submit"]'); e && (i.preventDefault(), handleRedirection(t, getUTMParams(), e)) })) } function handleRedirection(t, i, e) { const n = t[normalizePath(window.location.pathname)] || t.default, a = isMobileDevice() ? isIOSDevice() ? n.ios : n.android : createDynamicLink(n, i); window.location.href = a } function createDynamicLink(t, i) { const e = new URLSearchParams(i).toString(), n = `https://web.auth.kyteapp.com/signup?${encodeURIComponent(e)}`; return `https://kyteapp.page.link/?${new URLSearchParams({ link: n, apn: t.apn, ibi: t.ibi, isi: t.isi, ct: t.utm_campaign, utm_source: i.utm_source, utm_medium: i.utm_medium, utm_campaign: i.utm_campaign, gclid: i.gclid }).toString()}` } function getUTMParams() { const t = new URLSearchParams(location.search), i = {}; return ["utm_source", "utm_medium", "utm_campaign", "gclid"].forEach((e => { i[e] = t.get(e) || "" })), i } function normalizePath(t) { return t.endsWith("/") ? t.slice(0, -1) : t } function isMobileDevice() { return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) } function isIOSDevice() { return /iPad|iPhone|iPod/.test(navigator.userAgent) || "MacIntel" === navigator.platform && navigator.maxTouchPoints > 1 } initializeLandingPageRedirection();