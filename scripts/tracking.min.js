async function initializeLandingPageRedirection() { try { const t = await fetchConfig(); "loading" === document.readyState ? document.addEventListener("DOMContentLoaded", (() => initialize(t))) : initialize(t) } catch (t) { console.error("Initialization failed:", t) } } async function fetchConfig() { const t = await fetch("https://growthatkyte.github.io/web/scripts/landing-pages-list.json"); if (!t.ok) throw new Error("Failed to fetch landing pages configuration"); return t.json() } function initialize(t) { applyButtonClasses(t), appendUTMParamsToLinks(), fillAttributionFields(), setupClickHandler(t) } function applyButtonClasses(t) { const e = normalizePath(window.location.pathname); document.querySelectorAll('input[type="submit"], button[type="submit"]').forEach((i => { shouldApplyClass(i, t, e) && (i.classList.add(t[e].redirectClass), console.log(`Applied '${t[e].redirectClass}' to buttons for path: ${e}`)) })) } function shouldApplyClass(t, e, i) { return !t.classList.contains("mauticform-button") && !t.classList.contains("direct-button") && e[i] } function setupClickHandler(t) { document.addEventListener("click", (e => { const i = e.target.closest('input[type="submit"], button[type="submit"]'); shouldHandleRedirection(i) && (e.preventDefault(), handleRedirection(t, getAttributionParams(), i)) })) } function shouldHandleRedirection(t) { return t && !t.classList.contains("mauticform-button") && !t.classList.contains("direct-button") } function handleRedirection(t, e, i) { const n = t[normalizePath(window.location.pathname)] || {}, a = getRedirectClass(i), r = isMobileDevice() ? handleMobileRedirection(a, n, e) : createRedirectUrl("https://web.auth.kyteapp.com/signup", e); window.location.href = r } function getRedirectClass(t) { return t.classList.contains("cpp-redir") ? "cpp-redir" : t.classList.contains("catalog-redir") ? "catalog-redir" : t.classList.contains("control-redir") ? "control-redir" : "default" } function handleMobileRedirection(t, e, i) { return "cpp-redir" === t ? handleCPPRedirection(e, i) : createStaticLink(t, i) } function handleCPPRedirection(t, e) { const i = new URLSearchParams(e).toString(); return isIOSDevice() ? t.ios ? `${t.ios}&${i}` : createRedirectUrl("https://web.auth.kyteapp.com/signup", e) : isAndroidDevice() && t.android ? `${t.android}&${i}` : createRedirectUrl("https://web.auth.kyteapp.com/signup", e) } function createStaticLink(t, e) { const i = { default: "https://pos.auth.kyteapp.com", "catalog-redir": "https://catalog.auth.kyteapp.com", "control-redir": "https://control.auth.kyteapp.com" }, n = i[t] || i.default; return `${n}?${mergeQueryParams(new URLSearchParams(new URL(n).search), e).toString()}` } function createRedirectUrl(t, e) { return `${t}?${mergeQueryParams(new URLSearchParams(new URL(t).search), e).toString()}` } function normalizePath(t) { return t.endsWith("/") ? t.slice(0, -1) : t } function getAttributionParams() { const t = new URLSearchParams(location.search), e = getParamsFromLocalStorage(), i = {}; return ["utm_source", "utm_medium", "utm_campaign", "utm_content", "utm_term", "gclid", "fbclid", "ttclid", "cid", "aid", "ref", "referrer", "campaignid", "adgroupid", "keyword", "gadid", "fbadid", "ttadid"].forEach((n => { t.has(n) ? i[n] = t.get(n) : e[n] && (i[n] = e[n]) })), i } function getParamsFromLocalStorage() { const t = {}; return ["utm_source", "utm_medium", "utm_campaign", "utm_content", "utm_term", "gclid", "fbclid", "ttclid", "cid", "aid", "ref", "referrer", "campaignid", "adgroupid", "keyword", "gadid", "fbadid", "ttadid"].forEach((e => { const i = localStorage.getItem(e); i && (t[e] = i) })), t } function appendUTMParamsToLinks() { const t = getAttributionParams(); document.querySelectorAll("a").forEach((e => { const i = new URL(e.href), n = mergeQueryParams(new URLSearchParams(i.search), t); i.search = n.toString(), e.href = i.toString() })) } function mergeQueryParams(t, e) { const i = new URLSearchParams(t); return Object.entries(e).forEach((([t, e]) => { e && i.set(t, e) })), i } function fillAttributionFields() { const t = getAttributionParams(); Object.keys(t).forEach((e => { const i = document.querySelector(`input[name="${e}"]`); i && (i.value = t[e]) })) } function isMobileDevice() { return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) } function isIOSDevice() { return /iPad|iPhone|iPod/.test(navigator.userAgent) } function isAndroidDevice() { return /Android/.test(navigator.userAgent) } initializeLandingPageRedirection();