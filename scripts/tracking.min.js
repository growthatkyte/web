async function initializeLandingPageRedirection() { try { const e = await fetchConfig(); "loading" === document.readyState ? document.addEventListener("DOMContentLoaded", (() => initialize(e))) : initialize(e) } catch (e) { console.error("Initialization failed:", e) } } async function fetchConfig() { const e = await fetch("https://growthatkyte.github.io/web/scripts/landing-pages-list.json"); if (!e.ok) throw new Error("Failed to fetch landing pages configuration"); return e.json() } function initialize(e) { applyButtonClasses(e), appendUTMParamsToLinks(), setupFormHandler(e) } function applyButtonClasses(e) { const t = normalizePath(window.location.pathname); document.querySelectorAll('input[type="submit"], button[type="submit"]').forEach((n => { shouldApplyClass(n, e, t) && (n.classList.add(e[t].redirectClass), console.log(`Applied '${e[t].redirectClass}' to buttons for path: ${t}`)) })) } function shouldApplyClass(e, t, n) { return !e.classList.contains("mauticform-button") && !e.classList.contains("direct-button") && !e.classList.contains("auth-submit") && t[n] } function setupFormHandler(e) { const t = document.getElementById("LeadForm"); t && t.addEventListener("submit", (t => { t.preventDefault(); const n = getUTMParams(); handleRedirection(e, n) })) } function handleRedirection(e, t) { const n = e[normalizePath(window.location.pathname)] || {}, a = isMobileDevice() ? handleMobileRedirection("default", n, t) : createRedirectUrl("https://web.auth.kyteapp.com/signup", t); window.location.href = a } function handleMobileRedirection(e, t, n) { return "cpp-redir" === e ? handleCPPRedirection(t, n) : createStaticLink(e, n) } function handleCPPRedirection(e, t) { const n = new URLSearchParams(t).toString(); return isIOSDevice() ? e.ios ? `${e.ios}&${n}` : createRedirectUrl("https://web.auth.kyteapp.com/signup", t) : isAndroidDevice() && e.android ? `${e.android}&${n}` : createRedirectUrl("https://web.auth.kyteapp.com/signup", t) } function createStaticLink(e, t) { const n = { default: "https://pos.auth.kyteapp.com", "catalog-redir": "https://catalog.auth.kyteapp.com", "control-redir": "https://control.auth.kyteapp.com" }, a = n[e] || n.default; return `${a}?${mergeQueryParams(new URLSearchParams(new URL(a).search), t).toString()}` } function createRedirectUrl(e, t) { return `${e}?${mergeQueryParams(new URLSearchParams(new URL(e).search), t).toString()}` } function normalizePath(e) { return e.endsWith("/") ? e.slice(0, -1) : e } function getUTMParams() { const e = new URLSearchParams(location.search), t = {}, n = getFormValues(); return ["utm_source", "utm_medium", "utm_campaign", "utm_content", "utm_term", "gclid", "fbclid", "ttclid", "campaignid", "adgroupid", "exp_email_only_signup"].forEach((a => { e.has(a) ? t[a] = e.get(a) : n[a] && (t[a] = n[a]) })), t } function getFormValues() { const e = document.forms.LeadForm.elements, t = {}; return Array.from(e).forEach((e => { e.name && e.value && (t[e.name] = e.value) })), t } function appendUTMParamsToLinks() { const e = getUTMParams(); document.querySelectorAll("a").forEach((t => { try { if (t.href && t.href.startsWith("http")) { const n = new URL(t.href), a = mergeQueryParams(new URLSearchParams(n.search), e); n.search = a.toString(), t.href = n.toString() } else console.warn("Invalid or unsupported link href:", t.href) } catch (e) { console.warn("Error processing link:", t.href, e) } })) } function mergeQueryParams(e, t) { const n = new URLSearchParams(e); return Object.entries(t).forEach((([e, t]) => { t && n.set(e, t) })), n } function isMobileDevice() { return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) } function isIOSDevice() { return /iPad|iPhone|iPod/.test(navigator.userAgent) } function isAndroidDevice() { return /Android/.test(navigator.userAgent) } initializeLandingPageRedirection();